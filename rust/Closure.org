* Syntax

#+BEGIN_SRC rust
  fn main() {
      let plus_one = |x: i32| x + 1;
      assert_eq!(2, plus_one(1));

      let plus_two = |x| {
          let mut result: i32 = x;

          result += 1;
          result += 1;

          result
      };

      assert_eq!(4, plus_two(2));

      fn plus_one_v1    (x: i32) -> i32 { x + 1 }
      let plus_one_v2 = |x: i32| -> i32 { x + 1 };
      let plus_one_v3 = |x: i32|          x + 1;
  }

#+END_SRC
  
* move closures
#+BEGIN_SRC rust
  fn main() {
      let mut num = 5;
      {
          let mut add_num = |x: i32| num += 1;
          add_num(5);
      }
      assert_eq!(10, num);
  }
#+END_SRC
In this case, our closure took a mutable reference to num.

#+BEGIN_SRC rust
  fn main() {
      let mut num = 5;
      {
          let mut add_num = move |x: i32| num += x;
          add_num(5);
      }

      assert_eq!(5, num);
  }
#+END_SRC
We only get 5. Rather than taking a mutable borrow out on our num, we took ownership of a copy.

Another way to think about move closure:they give a closure its own stack frame.Without move closure may be tied to the stack frame that createdit, while a move closure is self-contained.

* Closure implementation
Rust' implementation of closures is a bit different than other languages. They are effectively syntax sugar for traits.

Using () to call a function, like foo(), is an overloadable operator. In Rust, we use the trait system to overload operators. We have three separate traits to overload with:
#+BEGIN_SRC rust
  pub trait Fn<Args> : FnMut<Args> {
      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
  }

  pub trait FnMut<Args> : FnOnce<Args> {
      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
  }

  pub trait FnOnce<Args> {
      type Output;

      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
  }
#+END_SRC

* Taking closures as arguments
- static dispatch:
#+BEGIN_SRC rust
  fn call_with_one<F>(some_closure: F) -> i32
      where F : Fn(i32) -> i32 {
      some_closure(1)
  }

  let answer = call_with_one(|x| x + 2);

  assert_eq!(3, answer);
#+END_SRC
- dynamic dispatch:
#+BEGIN_SRC rust
  fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {
      some_closure(1)
  }

  let answer = call_with_one(&|x| x + 2);

  assert_eq!(3, answer);
#+END_SRC

* Function pointers and closures
#+BEGIN_SRC rust
  fn call_with_one(some_closure: &Fn(i32) -> i32) -> i32 {
      some_closure(1)
  }

  fn add_one(i: i32) -> i32 {
      i + 1
  }

  let f = add_one;

  let answer = call_with_one(&f); // call_with_one(&add_one); is ok too
  assert_eq!(2, answer);
#+END_SRC
  
* Returning closures
Return closures is not easy as I think...
Because rust need to know the size of return type. Also need know the lifetime. So it looks like this:
#+BEGIN_SRC rust
  fn factory() -> Box<Fn(i32) -> i32> {
      let num = 5;

      Box::new(move |x| x + num) // must move here
      // without move num borrow has a lifetime of the stack frame.
  }

  let f = factory();

  let answer = f(1);

  assert_eq!(6, answer);
#+END_SRC
